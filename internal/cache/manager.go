package cache

import (
	"context"
	"crypto/md5"
	"encoding/hex"
	"fmt"
	"log"
	"time"
)

// CacheManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
type CacheManager struct {
	cache Cache
}

// NewCacheManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä
func NewCacheManager(capacity int64) (*CacheManager, error) {
	cache := NewLRUCache(capacity)

	return &CacheManager{
		cache: cache,
	}, nil
}

// CacheKey –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫—ç—à–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
type CacheKey struct {
	Type       string
	UserID     string
	DocumentID string
	Filter     string
	Limit      int
}

// GenerateKey –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∫—ç—à–∞
func (ck *CacheKey) GenerateKey() string {
	data := fmt.Sprintf("%s:%s:%s:%s:%d",
		ck.Type, ck.UserID, ck.DocumentID, ck.Filter, ck.Limit)

	hash := md5.Sum([]byte(data))
	return hex.EncodeToString(hash[:])
}

// DocumentListKey —Å–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
func DocumentListKey(userID, filterKey, filterValue string, limit int) string {
	filter := ""
	if filterKey != "" && filterValue != "" {
		filter = fmt.Sprintf("%s:%s", filterKey, filterValue)
	}

	key := &CacheKey{
		Type:   "docs:list",
		UserID: userID,
		Filter: filter,
		Limit:  limit,
	}
	return key.GenerateKey()
}

// DocumentKey —Å–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
func DocumentKey(documentID string) string {
	key := &CacheKey{
		Type:       "docs:item",
		DocumentID: documentID,
	}
	return key.GenerateKey()
}

// UserKey —Å–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func UserKey(userID string) string {
	key := &CacheKey{
		Type:   "user",
		UserID: userID,
	}
	return key.GenerateKey()
}

// AccessKey —Å–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –¥–ª—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
func AccessKey(documentID, userID string) string {
	key := &CacheKey{
		Type:       "docs:access",
		DocumentID: documentID,
		UserID:     userID,
	}
	return key.GenerateKey()
}

// GetDocumentList –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –∫—ç—à–∞
func (cm *CacheManager) GetDocumentList(ctx context.Context, userID, filterKey, filterValue string, limit int) ([]interface{}, bool) {
	key := DocumentListKey(userID, filterKey, filterValue, limit)

	value, found := cm.cache.Get(ctx, key)
	if !found {
		return nil, false
	}

	if docs, ok := value.([]interface{}); ok {
		return docs, true
	}

	return nil, false
}

// SetDocumentList —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫—ç—à
func (cm *CacheManager) SetDocumentList(ctx context.Context, userID, filterKey, filterValue string, limit int, docs []interface{}) error {
	key := DocumentListKey(userID, filterKey, filterValue, limit)

	err := cm.cache.Set(ctx, key, docs, 5*time.Minute) // TTL 5 –º–∏–Ω—É—Ç –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
	if err != nil {
		return fmt.Errorf("failed to cache document list: %w", err)
	}

	return nil
}

// GetDocument –ø–æ–ª—É—á–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –∫—ç—à–∞
func (cm *CacheManager) GetDocument(ctx context.Context, documentID string) (interface{}, bool) {
	key := DocumentKey(documentID)

	value, found := cm.cache.Get(ctx, key)
	if !found {
		return nil, false
	}

	return value, true
}

// SetDocument —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ –∫—ç—à
func (cm *CacheManager) SetDocument(ctx context.Context, documentID string, doc interface{}) error {
	key := DocumentKey(documentID)

	err := cm.cache.Set(ctx, key, doc, 10*time.Minute) // TTL 10 –º–∏–Ω—É—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
	if err != nil {
		return fmt.Errorf("failed to cache document: %w", err)
	}

	return nil
}

// GetUser –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞
func (cm *CacheManager) GetUser(ctx context.Context, userID string) (interface{}, bool) {
	key := UserKey(userID)

	value, found := cm.cache.Get(ctx, key)
	if !found {
		return nil, false
	}

	return value, true
}

// SetUser —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à
func (cm *CacheManager) SetUser(ctx context.Context, userID string, user interface{}) error {
	key := UserKey(userID)

	err := cm.cache.Set(ctx, key, user, 30*time.Minute) // TTL 30 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	if err != nil {
		return fmt.Errorf("failed to cache user: %w", err)
	}

	return nil
}

// GetAccess –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫—ç—à–∞
func (cm *CacheManager) GetAccess(ctx context.Context, documentID, userID string) (bool, bool) {
	key := AccessKey(documentID, userID)

	value, found := cm.cache.Get(ctx, key)
	if !found {
		return false, false
	}

	if hasAccess, ok := value.(bool); ok {
		return hasAccess, true
	}

	return false, false
}

// SetAccess —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –∫—ç—à
func (cm *CacheManager) SetAccess(ctx context.Context, documentID, userID string, hasAccess bool) error {
	key := AccessKey(documentID, userID)

	err := cm.cache.Set(ctx, key, hasAccess, 15*time.Minute) // TTL 15 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
	if err != nil {
		return fmt.Errorf("failed to cache access: %w", err)
	}

	return nil
}

// InvalidateDocument –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
func (cm *CacheManager) InvalidateDocument(ctx context.Context, documentID string) error {
	log.Printf("üóëÔ∏è Cache: –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ %s", documentID)

	// –£–¥–∞–ª—è–µ–º —Å–∞–º –¥–æ–∫—É–º–µ–Ω—Ç
	docKey := DocumentKey(documentID)
	if err := cm.cache.Delete(ctx, docKey); err != nil {
		return fmt.Errorf("failed to delete document from cache: %w", err)
	}

	// –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
	accessPattern := fmt.Sprintf("docs:access:%s", documentID)
	if err := cm.cache.InvalidateByPattern(ctx, accessPattern); err != nil {
		return fmt.Errorf("failed to invalidate access cache: %w", err)
	}

	// –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–∏—Å–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–æ–Ω–∏ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç)
	listPattern := "docs:list"
	if err := cm.cache.InvalidateByPattern(ctx, listPattern); err != nil {
		return fmt.Errorf("failed to invalidate document lists: %w", err)
	}

	return nil
}

// InvalidateUserDocuments –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (cm *CacheManager) InvalidateUserDocuments(ctx context.Context, userID string) error {
	log.Printf("üóëÔ∏è Cache: –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", userID)

	// –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–∏—Å–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	listPattern := fmt.Sprintf("docs:list:%s", userID)
	if err := cm.cache.InvalidateByPattern(ctx, listPattern); err != nil {
		return fmt.Errorf("failed to invalidate user document lists: %w", err)
	}

	return nil
}

// InvalidateUser –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (cm *CacheManager) InvalidateUser(ctx context.Context, userID string) error {
	log.Printf("üóëÔ∏è Cache: –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", userID)

	// –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userKey := UserKey(userID)
	if err := cm.cache.Delete(ctx, userKey); err != nil {
		return fmt.Errorf("failed to delete user from cache: %w", err)
	}

	// –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	accessPattern := fmt.Sprintf("docs:access:%s", userID)
	if err := cm.cache.InvalidateByPattern(ctx, accessPattern); err != nil {
		return fmt.Errorf("failed to invalidate user access cache: %w", err)
	}

	// –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	return cm.InvalidateUserDocuments(ctx, userID)
}

// Clear –æ—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à
func (cm *CacheManager) Clear(ctx context.Context) error {
	log.Printf("üóëÔ∏è Cache: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞")
	return cm.cache.Clear(ctx)
}
