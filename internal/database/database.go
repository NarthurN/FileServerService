package database

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"time"

	"github.com/NarthurN/FileServerService/internal/config"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/jackc/pgx/v5/stdlib"
)

// NewPool —Å–æ–∑–¥–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ PostgreSQL
func NewPool(cfg config.DatabaseConfig) (*pgxpool.Pool, error) {
	dsn := fmt.Sprintf(
		"postgres://%s:%s@%s:%d/%s?sslmode=%s",
		cfg.User, cfg.Password, cfg.Host, cfg.Port, cfg.DBName, cfg.SSLMode,
	)

	poolConfig, err := pgxpool.ParseConfig(dsn)
	if err != nil {
		return nil, fmt.Errorf("üö® –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %w", err)
	}

	poolConfig.MaxConns = 30
	poolConfig.MinConns = 5
	poolConfig.MaxConnLifetime = time.Hour
	poolConfig.MaxConnIdleTime = time.Minute * 30
	poolConfig.HealthCheckPeriod = time.Minute

	pool, err := pgxpool.NewWithConfig(context.Background(), poolConfig)
	if err != nil {
		return nil, fmt.Errorf("üö® –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	if err := pool.Ping(context.Background()); err != nil {
		return nil, fmt.Errorf("üö® –æ—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}

	log.Println("üöÄ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
	return pool, nil
}

// NewSQLDB —Å–æ–∑–¥–∞–µ—Ç *sql.DB –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π Goose
func NewSQLDB(cfg config.DatabaseConfig) (*sql.DB, error) {
	dsn := fmt.Sprintf(
		"postgres://%s:%s@%s:%d/%s?sslmode=%s",
		cfg.User, cfg.Password, cfg.Host, cfg.Port, cfg.DBName, cfg.SSLMode,
	)

	db, err := sql.Open("postgres", dsn)
	if err != nil {
		return nil, fmt.Errorf("üö® –æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	db.SetMaxOpenConns(5)
	db.SetMaxIdleConns(2)
	db.SetConnMaxLifetime(time.Hour)

	if err := db.Ping(); err != nil {
		return nil, fmt.Errorf("üö® –æ—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}

	log.Println("‚úÖ SQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω–æ")
	return db, nil
}

// ConvertPoolToSQLDB –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç pgx.Pool –≤ *sql.DB (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
func ConvertPoolToSQLDB(pool *pgxpool.Pool) *sql.DB {
	return stdlib.OpenDB(*pool.Config().ConnConfig)
}
