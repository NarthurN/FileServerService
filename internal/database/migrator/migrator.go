package migrator

import (
	"context"
	"database/sql"
	"embed"
	"fmt"
	"log"

	_ "github.com/lib/pq"
	"github.com/pressly/goose/v3"
)

//go:embed migrations/*.sql
var embedMigrations embed.FS

// Migrator handles database schema migrations.
type Migrator struct {
	db *sql.DB
}

func NewMigrator(db *sql.DB) *Migrator {
	return &Migrator{db: db}
}

func (m *Migrator) Up(ctx context.Context) error {
	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è embedded —Ñ–∞–π–ª–æ–≤
	goose.SetBaseFS(embedMigrations)

	// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
	if err := goose.SetDialect("postgres"); err != nil {
		return fmt.Errorf("üö® –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞–ª–µ–∫—Ç–∞: %w", err)
	}

	if err := goose.UpContext(ctx, m.db, "migrations"); err != nil {
		return fmt.Errorf("üö® –æ—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: %w", err)
	}

	log.Println("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
	return nil
}

func (m *Migrator) Down(ctx context.Context) error {
	goose.SetBaseFS(embedMigrations)

	if err := goose.SetDialect("postgres"); err != nil {
		return fmt.Errorf("üö® –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞–ª–µ–∫—Ç–∞: %w", err)
	}

	if err := goose.DownContext(ctx, m.db, "migrations"); err != nil {
		return fmt.Errorf("üö® –æ—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –º–∏–≥—Ä–∞—Ü–∏–π: %w", err)
	}

	log.Println("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
	return nil
}

func (m *Migrator) Status(ctx context.Context) error {
	goose.SetBaseFS(embedMigrations)

	if err := goose.SetDialect("postgres"); err != nil {
		return fmt.Errorf("üö® –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞–ª–µ–∫—Ç–∞: %w", err)
	}

	if err := goose.StatusContext(ctx, m.db, "migrations"); err != nil {
		return fmt.Errorf("üö® –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π: %w", err)
	}

	return nil
}
