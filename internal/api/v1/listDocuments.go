package v1

import (
	"context"
	"log"

	"github.com/NarthurN/FileServerService/internal/model"
	fileserverV1 "github.com/NarthurN/FileServerService/pkg/generated/api/fileserver/v1"
)

// ListDocuments - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
func (a *api) ListDocuments(ctx context.Context, params fileserverV1.ListDocumentsParams) (fileserverV1.ListDocumentsRes, error) {
	log.Printf("üîÑ API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

	// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
	user, err := a.validateToken(ctx, params.Token)
	if err != nil {
		return &fileserverV1.UnauthorizedError{
			Error: fileserverV1.UnauthorizedErrorError{
				Code: 401,
				Text: "üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω",
			},
		}, nil
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—å–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—Ç—å
	var docs []model.Document
	if loginParam, ok := params.Login.Get(); ok && loginParam != "" {
		// –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ç–µ, –∫ –∫–æ—Ç–æ—Ä—ã–º –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø)
		targetUser, err := a.getUserByLogin(ctx, loginParam)
		if err != nil {
			return &fileserverV1.InternalServerError{
				Error: fileserverV1.InternalServerErrorError{
					Code: 500,
					Text: "üö® –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã",
				},
			}, nil
		}

		docs, err = a.service.GetDocumentsForUser(ctx, user.ID, targetUser.ID)
		if err != nil {
			return &fileserverV1.InternalServerError{
				Error: fileserverV1.InternalServerErrorError{
					Code: 500,
					Text: "üö® –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã",
				},
			}, nil
		}
	} else {
		// –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
		docs, err = a.service.GetListDocuments(ctx, user.ID)
		if err != nil {
			return &fileserverV1.InternalServerError{
				Error: fileserverV1.InternalServerErrorError{
					Code: 500,
					Text: "üö® –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã",
				},
			}, nil
		}
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
	if keyParam, keyOk := params.Key.Get(); keyOk {
		if valueParam, valueOk := params.Value.Get(); valueOk && valueParam != "" {
			docs = a.filterDocuments(docs, string(keyParam), valueParam)
		}
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
	if limitParam, ok := params.Limit.Get(); ok && limitParam > 0 {
		if len(docs) > limitParam {
			docs = docs[:limitParam]
		}
	}

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DTO –¥–ª—è –æ—Ç–≤–µ—Ç–∞
	docDTOs := make([]fileserverV1.DocumentDto, 0, len(docs))
	for _, doc := range docs {
		dto := fileserverV1.DocumentDto{
			ID:      doc.ID,
			Name:    doc.Name,
			Mime:    doc.MimeType,
			File:    doc.IsFile,
			Public:  doc.IsPublic,
			Created: doc.CreatedAt.Format("2006-01-02 15:04:05"),
			Grant:   doc.Grants,
		}
		docDTOs = append(docDTOs, dto)
	}

	log.Printf("üéâ API: –ù–∞–π–¥–µ–Ω–æ %d –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", len(docDTOs))

	return &fileserverV1.ListDocumentsResponse{
		Data: fileserverV1.ListDocumentsResponseData{
			Docs: docDTOs,
		},
	}, nil
}

// ListDocumentsHead - HEAD –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
func (a *api) ListDocumentsHead(ctx context.Context, params fileserverV1.ListDocumentsHeadParams) (fileserverV1.ListDocumentsHeadRes, error) {
	// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
	_, err := a.validateToken(ctx, params.Token)
	if err != nil {
		return &fileserverV1.ListDocumentsHeadUnauthorized{}, nil
	}

	// HEAD –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–¥–∞–Ω–∏—é
	return &fileserverV1.ListDocumentsHeadOK{}, nil
}
