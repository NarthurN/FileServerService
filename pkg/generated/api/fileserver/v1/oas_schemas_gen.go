// Code generated by ogen, DO NOT EDIT.

package fileserver_v1

import (
	"io"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	ht "github.com/ogen-go/ogen/http"
)

// Ref: #/components/schemas/bad_request_error
type BadRequestError struct {
	Error BadRequestErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *BadRequestError) GetError() BadRequestErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *BadRequestError) SetError(val BadRequestErrorError) {
	s.Error = val
}

func (*BadRequestError) createDocumentRes() {}
func (*BadRequestError) loginUserRes()      {}
func (*BadRequestError) registerUserRes()   {}

type BadRequestErrorError struct {
	Code int    `json:"code"`
	Text string `json:"text"`
}

// GetCode returns the value of Code.
func (s *BadRequestErrorError) GetCode() int {
	return s.Code
}

// GetText returns the value of Text.
func (s *BadRequestErrorError) GetText() string {
	return s.Text
}

// SetCode sets the value of Code.
func (s *BadRequestErrorError) SetCode(val int) {
	s.Code = val
}

// SetText sets the value of Text.
func (s *BadRequestErrorError) SetText(val string) {
	s.Text = val
}

// Ref: #/components/schemas/create_document_request
type CreateDocumentRequestMultipart struct {
	Meta Meta `json:"meta"`
	// JSON данные документа (опционально).
	JSON OptCreateDocumentRequestMultipartJSON `json:"json"`
	// Файл документа (опционально).
	File OptMultipartFile `json:"file"`
}

// GetMeta returns the value of Meta.
func (s *CreateDocumentRequestMultipart) GetMeta() Meta {
	return s.Meta
}

// GetJSON returns the value of JSON.
func (s *CreateDocumentRequestMultipart) GetJSON() OptCreateDocumentRequestMultipartJSON {
	return s.JSON
}

// GetFile returns the value of File.
func (s *CreateDocumentRequestMultipart) GetFile() OptMultipartFile {
	return s.File
}

// SetMeta sets the value of Meta.
func (s *CreateDocumentRequestMultipart) SetMeta(val Meta) {
	s.Meta = val
}

// SetJSON sets the value of JSON.
func (s *CreateDocumentRequestMultipart) SetJSON(val OptCreateDocumentRequestMultipartJSON) {
	s.JSON = val
}

// SetFile sets the value of File.
func (s *CreateDocumentRequestMultipart) SetFile(val OptMultipartFile) {
	s.File = val
}

// JSON данные документа (опционально).
type CreateDocumentRequestMultipartJSON map[string]jx.Raw

func (s *CreateDocumentRequestMultipartJSON) init() CreateDocumentRequestMultipartJSON {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/create_document_response
type CreateDocumentResponse struct {
	Data CreateDocumentResponseData `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateDocumentResponse) GetData() CreateDocumentResponseData {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateDocumentResponse) SetData(val CreateDocumentResponseData) {
	s.Data = val
}

func (*CreateDocumentResponse) createDocumentRes() {}

type CreateDocumentResponseData struct {
	// JSON данные документа (если были переданы).
	JSON OptCreateDocumentResponseDataJSON `json:"json"`
	// Имя загруженного файла.
	File string `json:"file"`
}

// GetJSON returns the value of JSON.
func (s *CreateDocumentResponseData) GetJSON() OptCreateDocumentResponseDataJSON {
	return s.JSON
}

// GetFile returns the value of File.
func (s *CreateDocumentResponseData) GetFile() string {
	return s.File
}

// SetJSON sets the value of JSON.
func (s *CreateDocumentResponseData) SetJSON(val OptCreateDocumentResponseDataJSON) {
	s.JSON = val
}

// SetFile sets the value of File.
func (s *CreateDocumentResponseData) SetFile(val string) {
	s.File = val
}

// JSON данные документа (если были переданы).
type CreateDocumentResponseDataJSON map[string]jx.Raw

func (s *CreateDocumentResponseDataJSON) init() CreateDocumentResponseDataJSON {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/delete_document_response
type DeleteDocumentResponse struct {
	// Результат удаления документа (ID документа -> true).
	Response DeleteDocumentResponseResponse `json:"response"`
}

// GetResponse returns the value of Response.
func (s *DeleteDocumentResponse) GetResponse() DeleteDocumentResponseResponse {
	return s.Response
}

// SetResponse sets the value of Response.
func (s *DeleteDocumentResponse) SetResponse(val DeleteDocumentResponseResponse) {
	s.Response = val
}

func (*DeleteDocumentResponse) deleteDocumentRes() {}

// Результат удаления документа (ID документа -> true).
type DeleteDocumentResponseResponse map[string]bool

func (s *DeleteDocumentResponseResponse) init() DeleteDocumentResponseResponse {
	m := *s
	if m == nil {
		m = map[string]bool{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/document_dto
type DocumentDto struct {
	// Уникальный идентификатор документа.
	ID string `json:"id"`
	// Имя документа.
	Name string `json:"name"`
	// MIME тип документа.
	Mime string `json:"mime"`
	// Является ли документ файлом.
	File bool `json:"file"`
	// Является ли документ публичным.
	Public bool `json:"public"`
	// Дата и время создания документа.
	Created string `json:"created"`
	// Список логинов пользователей с доступом.
	Grant []string `json:"grant"`
}

// GetID returns the value of ID.
func (s *DocumentDto) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *DocumentDto) GetName() string {
	return s.Name
}

// GetMime returns the value of Mime.
func (s *DocumentDto) GetMime() string {
	return s.Mime
}

// GetFile returns the value of File.
func (s *DocumentDto) GetFile() bool {
	return s.File
}

// GetPublic returns the value of Public.
func (s *DocumentDto) GetPublic() bool {
	return s.Public
}

// GetCreated returns the value of Created.
func (s *DocumentDto) GetCreated() string {
	return s.Created
}

// GetGrant returns the value of Grant.
func (s *DocumentDto) GetGrant() []string {
	return s.Grant
}

// SetID sets the value of ID.
func (s *DocumentDto) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DocumentDto) SetName(val string) {
	s.Name = val
}

// SetMime sets the value of Mime.
func (s *DocumentDto) SetMime(val string) {
	s.Mime = val
}

// SetFile sets the value of File.
func (s *DocumentDto) SetFile(val bool) {
	s.File = val
}

// SetPublic sets the value of Public.
func (s *DocumentDto) SetPublic(val bool) {
	s.Public = val
}

// SetCreated sets the value of Created.
func (s *DocumentDto) SetCreated(val string) {
	s.Created = val
}

// SetGrant sets the value of Grant.
func (s *DocumentDto) SetGrant(val []string) {
	s.Grant = val
}

// Ref: #/components/schemas/forbidden_error
type ForbiddenError struct {
	Error ForbiddenErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *ForbiddenError) GetError() ForbiddenErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ForbiddenError) SetError(val ForbiddenErrorError) {
	s.Error = val
}

func (*ForbiddenError) deleteDocumentRes() {}
func (*ForbiddenError) getDocumentRes()    {}

type ForbiddenErrorError struct {
	Code int    `json:"code"`
	Text string `json:"text"`
}

// GetCode returns the value of Code.
func (s *ForbiddenErrorError) GetCode() int {
	return s.Code
}

// GetText returns the value of Text.
func (s *ForbiddenErrorError) GetText() string {
	return s.Text
}

// SetCode sets the value of Code.
func (s *ForbiddenErrorError) SetCode(val int) {
	s.Code = val
}

// SetText sets the value of Text.
func (s *ForbiddenErrorError) SetText(val string) {
	s.Text = val
}

// GetDocumentHeadForbidden is response for GetDocumentHead operation.
type GetDocumentHeadForbidden struct{}

func (*GetDocumentHeadForbidden) getDocumentHeadRes() {}

// GetDocumentHeadInternalServerError is response for GetDocumentHead operation.
type GetDocumentHeadInternalServerError struct{}

func (*GetDocumentHeadInternalServerError) getDocumentHeadRes() {}

// GetDocumentHeadNotFound is response for GetDocumentHead operation.
type GetDocumentHeadNotFound struct{}

func (*GetDocumentHeadNotFound) getDocumentHeadRes() {}

// GetDocumentHeadOK is response for GetDocumentHead operation.
type GetDocumentHeadOK struct{}

func (*GetDocumentHeadOK) getDocumentHeadRes() {}

// GetDocumentHeadUnauthorized is response for GetDocumentHead operation.
type GetDocumentHeadUnauthorized struct{}

func (*GetDocumentHeadUnauthorized) getDocumentHeadRes() {}

type GetDocumentOKApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetDocumentOKApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetDocumentOKApplicationOctetStream) getDocumentRes() {}

// Ref: #/components/schemas/get_document_response
type GetDocumentResponse struct {
	// JSON данные документа.
	Data GetDocumentResponseData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetDocumentResponse) GetData() GetDocumentResponseData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetDocumentResponse) SetData(val GetDocumentResponseData) {
	s.Data = val
}

func (*GetDocumentResponse) getDocumentRes() {}

// JSON данные документа.
type GetDocumentResponseData map[string]jx.Raw

func (s *GetDocumentResponseData) init() GetDocumentResponseData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/internal_server_error
type InternalServerError struct {
	Error InternalServerErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *InternalServerError) GetError() InternalServerErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *InternalServerError) SetError(val InternalServerErrorError) {
	s.Error = val
}

func (*InternalServerError) createDocumentRes() {}
func (*InternalServerError) deleteDocumentRes() {}
func (*InternalServerError) getDocumentRes()    {}
func (*InternalServerError) listDocumentsRes()  {}
func (*InternalServerError) loginUserRes()      {}
func (*InternalServerError) logoutUserRes()     {}
func (*InternalServerError) registerUserRes()   {}

type InternalServerErrorError struct {
	Code int    `json:"code"`
	Text string `json:"text"`
}

// GetCode returns the value of Code.
func (s *InternalServerErrorError) GetCode() int {
	return s.Code
}

// GetText returns the value of Text.
func (s *InternalServerErrorError) GetText() string {
	return s.Text
}

// SetCode sets the value of Code.
func (s *InternalServerErrorError) SetCode(val int) {
	s.Code = val
}

// SetText sets the value of Text.
func (s *InternalServerErrorError) SetText(val string) {
	s.Text = val
}

type Key string

const (
	KeyName    Key = "name"
	KeyMime    Key = "mime"
	KeyPublic  Key = "public"
	KeyFile    Key = "file"
	KeyCreated Key = "created"
)

// AllValues returns all Key values.
func (Key) AllValues() []Key {
	return []Key{
		KeyName,
		KeyMime,
		KeyPublic,
		KeyFile,
		KeyCreated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Key) MarshalText() ([]byte, error) {
	switch s {
	case KeyName:
		return []byte(s), nil
	case KeyMime:
		return []byte(s), nil
	case KeyPublic:
		return []byte(s), nil
	case KeyFile:
		return []byte(s), nil
	case KeyCreated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Key) UnmarshalText(data []byte) error {
	switch Key(data) {
	case KeyName:
		*s = KeyName
		return nil
	case KeyMime:
		*s = KeyMime
		return nil
	case KeyPublic:
		*s = KeyPublic
		return nil
	case KeyFile:
		*s = KeyFile
		return nil
	case KeyCreated:
		*s = KeyCreated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ListDocumentsHeadInternalServerError is response for ListDocumentsHead operation.
type ListDocumentsHeadInternalServerError struct{}

func (*ListDocumentsHeadInternalServerError) listDocumentsHeadRes() {}

// ListDocumentsHeadOK is response for ListDocumentsHead operation.
type ListDocumentsHeadOK struct{}

func (*ListDocumentsHeadOK) listDocumentsHeadRes() {}

// ListDocumentsHeadUnauthorized is response for ListDocumentsHead operation.
type ListDocumentsHeadUnauthorized struct{}

func (*ListDocumentsHeadUnauthorized) listDocumentsHeadRes() {}

// Ref: #/components/schemas/list_documents_response
type ListDocumentsResponse struct {
	Data ListDocumentsResponseData `json:"data"`
}

// GetData returns the value of Data.
func (s *ListDocumentsResponse) GetData() ListDocumentsResponseData {
	return s.Data
}

// SetData sets the value of Data.
func (s *ListDocumentsResponse) SetData(val ListDocumentsResponseData) {
	s.Data = val
}

func (*ListDocumentsResponse) listDocumentsRes() {}

type ListDocumentsResponseData struct {
	// Список документов.
	Docs []DocumentDto `json:"docs"`
}

// GetDocs returns the value of Docs.
func (s *ListDocumentsResponseData) GetDocs() []DocumentDto {
	return s.Docs
}

// SetDocs sets the value of Docs.
func (s *ListDocumentsResponseData) SetDocs(val []DocumentDto) {
	s.Docs = val
}

// Ref: #/components/schemas/login_request
type LoginRequest struct {
	// Логин пользователя.
	Login string `json:"login"`
	// Пароль пользователя.
	Pswd string `json:"pswd"`
}

// GetLogin returns the value of Login.
func (s *LoginRequest) GetLogin() string {
	return s.Login
}

// GetPswd returns the value of Pswd.
func (s *LoginRequest) GetPswd() string {
	return s.Pswd
}

// SetLogin sets the value of Login.
func (s *LoginRequest) SetLogin(val string) {
	s.Login = val
}

// SetPswd sets the value of Pswd.
func (s *LoginRequest) SetPswd(val string) {
	s.Pswd = val
}

// Ref: #/components/schemas/login_response
type LoginResponse struct {
	Response LoginResponseResponse `json:"response"`
}

// GetResponse returns the value of Response.
func (s *LoginResponse) GetResponse() LoginResponseResponse {
	return s.Response
}

// SetResponse sets the value of Response.
func (s *LoginResponse) SetResponse(val LoginResponseResponse) {
	s.Response = val
}

func (*LoginResponse) loginUserRes() {}

type LoginResponseResponse struct {
	// Токен авторизации.
	Token string `json:"token"`
}

// GetToken returns the value of Token.
func (s *LoginResponseResponse) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *LoginResponseResponse) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/logout_response
type LogoutResponse struct {
	// Результат завершения сессии (токен -> true).
	Response LogoutResponseResponse `json:"response"`
}

// GetResponse returns the value of Response.
func (s *LogoutResponse) GetResponse() LogoutResponseResponse {
	return s.Response
}

// SetResponse sets the value of Response.
func (s *LogoutResponse) SetResponse(val LogoutResponseResponse) {
	s.Response = val
}

func (*LogoutResponse) logoutUserRes() {}

// Результат завершения сессии (токен -> true).
type LogoutResponseResponse map[string]bool

func (s *LogoutResponseResponse) init() LogoutResponseResponse {
	m := *s
	if m == nil {
		m = map[string]bool{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/meta
type Meta struct {
	// Имя документа.
	Name string `json:"name"`
	// Является ли документ файлом.
	File bool `json:"file"`
	// Является ли документ публичным.
	Public bool `json:"public"`
	// Токен авторизации.
	Token string `json:"token"`
	// MIME тип документа.
	Mime string `json:"mime"`
	// Список логинов пользователей, которым предоставлен
	// доступ.
	Grant []string `json:"grant"`
}

// GetName returns the value of Name.
func (s *Meta) GetName() string {
	return s.Name
}

// GetFile returns the value of File.
func (s *Meta) GetFile() bool {
	return s.File
}

// GetPublic returns the value of Public.
func (s *Meta) GetPublic() bool {
	return s.Public
}

// GetToken returns the value of Token.
func (s *Meta) GetToken() string {
	return s.Token
}

// GetMime returns the value of Mime.
func (s *Meta) GetMime() string {
	return s.Mime
}

// GetGrant returns the value of Grant.
func (s *Meta) GetGrant() []string {
	return s.Grant
}

// SetName sets the value of Name.
func (s *Meta) SetName(val string) {
	s.Name = val
}

// SetFile sets the value of File.
func (s *Meta) SetFile(val bool) {
	s.File = val
}

// SetPublic sets the value of Public.
func (s *Meta) SetPublic(val bool) {
	s.Public = val
}

// SetToken sets the value of Token.
func (s *Meta) SetToken(val string) {
	s.Token = val
}

// SetMime sets the value of Mime.
func (s *Meta) SetMime(val string) {
	s.Mime = val
}

// SetGrant sets the value of Grant.
func (s *Meta) SetGrant(val []string) {
	s.Grant = val
}

// Ref: #/components/schemas/not_found_error
type NotFoundError struct {
	Error NotFoundErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *NotFoundError) GetError() NotFoundErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *NotFoundError) SetError(val NotFoundErrorError) {
	s.Error = val
}

func (*NotFoundError) deleteDocumentRes() {}
func (*NotFoundError) getDocumentRes()    {}

type NotFoundErrorError struct {
	Code int    `json:"code"`
	Text string `json:"text"`
}

// GetCode returns the value of Code.
func (s *NotFoundErrorError) GetCode() int {
	return s.Code
}

// GetText returns the value of Text.
func (s *NotFoundErrorError) GetText() string {
	return s.Text
}

// SetCode sets the value of Code.
func (s *NotFoundErrorError) SetCode(val int) {
	s.Code = val
}

// SetText sets the value of Text.
func (s *NotFoundErrorError) SetText(val string) {
	s.Text = val
}

// NewOptCreateDocumentRequestMultipartJSON returns new OptCreateDocumentRequestMultipartJSON with value set to v.
func NewOptCreateDocumentRequestMultipartJSON(v CreateDocumentRequestMultipartJSON) OptCreateDocumentRequestMultipartJSON {
	return OptCreateDocumentRequestMultipartJSON{
		Value: v,
		Set:   true,
	}
}

// OptCreateDocumentRequestMultipartJSON is optional CreateDocumentRequestMultipartJSON.
type OptCreateDocumentRequestMultipartJSON struct {
	Value CreateDocumentRequestMultipartJSON
	Set   bool
}

// IsSet returns true if OptCreateDocumentRequestMultipartJSON was set.
func (o OptCreateDocumentRequestMultipartJSON) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateDocumentRequestMultipartJSON) Reset() {
	var v CreateDocumentRequestMultipartJSON
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateDocumentRequestMultipartJSON) SetTo(v CreateDocumentRequestMultipartJSON) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateDocumentRequestMultipartJSON) Get() (v CreateDocumentRequestMultipartJSON, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateDocumentRequestMultipartJSON) Or(d CreateDocumentRequestMultipartJSON) CreateDocumentRequestMultipartJSON {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateDocumentResponseDataJSON returns new OptCreateDocumentResponseDataJSON with value set to v.
func NewOptCreateDocumentResponseDataJSON(v CreateDocumentResponseDataJSON) OptCreateDocumentResponseDataJSON {
	return OptCreateDocumentResponseDataJSON{
		Value: v,
		Set:   true,
	}
}

// OptCreateDocumentResponseDataJSON is optional CreateDocumentResponseDataJSON.
type OptCreateDocumentResponseDataJSON struct {
	Value CreateDocumentResponseDataJSON
	Set   bool
}

// IsSet returns true if OptCreateDocumentResponseDataJSON was set.
func (o OptCreateDocumentResponseDataJSON) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateDocumentResponseDataJSON) Reset() {
	var v CreateDocumentResponseDataJSON
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateDocumentResponseDataJSON) SetTo(v CreateDocumentResponseDataJSON) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateDocumentResponseDataJSON) Get() (v CreateDocumentResponseDataJSON, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateDocumentResponseDataJSON) Or(d CreateDocumentResponseDataJSON) CreateDocumentResponseDataJSON {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptKey returns new OptKey with value set to v.
func NewOptKey(v Key) OptKey {
	return OptKey{
		Value: v,
		Set:   true,
	}
}

// OptKey is optional Key.
type OptKey struct {
	Value Key
	Set   bool
}

// IsSet returns true if OptKey was set.
func (o OptKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKey) Reset() {
	var v Key
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKey) SetTo(v Key) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKey) Get() (v Key, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptKey) Or(d Key) Key {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMultipartFile returns new OptMultipartFile with value set to v.
func NewOptMultipartFile(v ht.MultipartFile) OptMultipartFile {
	return OptMultipartFile{
		Value: v,
		Set:   true,
	}
}

// OptMultipartFile is optional ht.MultipartFile.
type OptMultipartFile struct {
	Value ht.MultipartFile
	Set   bool
}

// IsSet returns true if OptMultipartFile was set.
func (o OptMultipartFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMultipartFile) Reset() {
	var v ht.MultipartFile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMultipartFile) SetTo(v ht.MultipartFile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMultipartFile) Get() (v ht.MultipartFile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMultipartFile) Or(d ht.MultipartFile) ht.MultipartFile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/register_request
type RegisterRequest struct {
	// Токен администратора (фиксированный, задается в
	// конфиге).
	Token string `json:"token"`
	// Логин нового пользователя (минимум 8 символов,
	// латиница и цифры).
	Login string `json:"login"`
	// Пароль нового пользователя:
	// - минимум 8 символов
	// - минимум 2 буквы в разных регистрах
	// - минимум 1 цифра
	// - минимум 1 символ (не буква и не цифра).
	Pswd string `json:"pswd"`
}

// GetToken returns the value of Token.
func (s *RegisterRequest) GetToken() string {
	return s.Token
}

// GetLogin returns the value of Login.
func (s *RegisterRequest) GetLogin() string {
	return s.Login
}

// GetPswd returns the value of Pswd.
func (s *RegisterRequest) GetPswd() string {
	return s.Pswd
}

// SetToken sets the value of Token.
func (s *RegisterRequest) SetToken(val string) {
	s.Token = val
}

// SetLogin sets the value of Login.
func (s *RegisterRequest) SetLogin(val string) {
	s.Login = val
}

// SetPswd sets the value of Pswd.
func (s *RegisterRequest) SetPswd(val string) {
	s.Pswd = val
}

// Ref: #/components/schemas/register_response
type RegisterResponse struct {
	Response RegisterResponseResponse `json:"response"`
}

// GetResponse returns the value of Response.
func (s *RegisterResponse) GetResponse() RegisterResponseResponse {
	return s.Response
}

// SetResponse sets the value of Response.
func (s *RegisterResponse) SetResponse(val RegisterResponseResponse) {
	s.Response = val
}

func (*RegisterResponse) registerUserRes() {}

type RegisterResponseResponse struct {
	// Логин зарегистрированного пользователя.
	Login string `json:"login"`
}

// GetLogin returns the value of Login.
func (s *RegisterResponseResponse) GetLogin() string {
	return s.Login
}

// SetLogin sets the value of Login.
func (s *RegisterResponseResponse) SetLogin(val string) {
	s.Login = val
}

// Ref: #/components/schemas/unauthorized_error
type UnauthorizedError struct {
	Error UnauthorizedErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *UnauthorizedError) GetError() UnauthorizedErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *UnauthorizedError) SetError(val UnauthorizedErrorError) {
	s.Error = val
}

func (*UnauthorizedError) createDocumentRes() {}
func (*UnauthorizedError) deleteDocumentRes() {}
func (*UnauthorizedError) getDocumentRes()    {}
func (*UnauthorizedError) listDocumentsRes()  {}
func (*UnauthorizedError) loginUserRes()      {}
func (*UnauthorizedError) logoutUserRes()     {}

type UnauthorizedErrorError struct {
	Code int    `json:"code"`
	Text string `json:"text"`
}

// GetCode returns the value of Code.
func (s *UnauthorizedErrorError) GetCode() int {
	return s.Code
}

// GetText returns the value of Text.
func (s *UnauthorizedErrorError) GetText() string {
	return s.Text
}

// SetCode sets the value of Code.
func (s *UnauthorizedErrorError) SetCode(val int) {
	s.Code = val
}

// SetText sets the value of Text.
func (s *UnauthorizedErrorError) SetText(val string) {
	s.Text = val
}
