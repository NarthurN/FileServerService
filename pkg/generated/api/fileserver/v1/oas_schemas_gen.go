// Code generated by ogen, DO NOT EDIT.

package fileserver_v1

import (
	"io"
	"time"

	"github.com/go-faster/jx"
	"github.com/google/uuid"

	ht "github.com/ogen-go/ogen/http"
)

// Ref: #/components/schemas/bad_request_error
type BadRequestError struct {
	// Код ошибки.
	Code BadRequestErrorCode `json:"code"`
	// Сообщение об ошибке.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *BadRequestError) GetCode() BadRequestErrorCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *BadRequestError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *BadRequestError) SetCode(val BadRequestErrorCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *BadRequestError) SetMessage(val string) {
	s.Message = val
}

func (*BadRequestError) createDocumentRes() {}
func (*BadRequestError) loginUserRes()      {}
func (*BadRequestError) registerUserRes()   {}

// Код ошибки.
type BadRequestErrorCode int

const (
	BadRequestErrorCode400 BadRequestErrorCode = 400
)

// AllValues returns all BadRequestErrorCode values.
func (BadRequestErrorCode) AllValues() []BadRequestErrorCode {
	return []BadRequestErrorCode{
		BadRequestErrorCode400,
	}
}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/conflict_error
type ConflictError struct {
	// Код ошибки.
	Code ConflictErrorCode `json:"code"`
	// Сообщение об ошибке.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *ConflictError) GetCode() ConflictErrorCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ConflictError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ConflictError) SetCode(val ConflictErrorCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ConflictError) SetMessage(val string) {
	s.Message = val
}

func (*ConflictError) registerUserRes() {}

// Код ошибки.
type ConflictErrorCode int

const (
	ConflictErrorCode409 ConflictErrorCode = 409
)

// AllValues returns all ConflictErrorCode values.
func (ConflictErrorCode) AllValues() []ConflictErrorCode {
	return []ConflictErrorCode{
		ConflictErrorCode409,
	}
}

// Ref: #/components/schemas/create_document_request
type CreateDocumentRequestMultipart struct {
	Meta Meta `json:"meta"`
	// Arbitrary document JSON data.
	JSON OptCreateDocumentRequestMultipartJSON `json:"json"`
	// File content.
	File ht.MultipartFile `json:"file"`
}

// GetMeta returns the value of Meta.
func (s *CreateDocumentRequestMultipart) GetMeta() Meta {
	return s.Meta
}

// GetJSON returns the value of JSON.
func (s *CreateDocumentRequestMultipart) GetJSON() OptCreateDocumentRequestMultipartJSON {
	return s.JSON
}

// GetFile returns the value of File.
func (s *CreateDocumentRequestMultipart) GetFile() ht.MultipartFile {
	return s.File
}

// SetMeta sets the value of Meta.
func (s *CreateDocumentRequestMultipart) SetMeta(val Meta) {
	s.Meta = val
}

// SetJSON sets the value of JSON.
func (s *CreateDocumentRequestMultipart) SetJSON(val OptCreateDocumentRequestMultipartJSON) {
	s.JSON = val
}

// SetFile sets the value of File.
func (s *CreateDocumentRequestMultipart) SetFile(val ht.MultipartFile) {
	s.File = val
}

// Arbitrary document JSON data.
type CreateDocumentRequestMultipartJSON map[string]jx.Raw

func (s *CreateDocumentRequestMultipartJSON) init() CreateDocumentRequestMultipartJSON {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/create_document_response
type CreateDocumentResponse struct {
	Data CreateDocumentResponseData `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateDocumentResponse) GetData() CreateDocumentResponseData {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateDocumentResponse) SetData(val CreateDocumentResponseData) {
	s.Data = val
}

func (*CreateDocumentResponse) createDocumentRes() {}

type CreateDocumentResponseData struct {
	// Document JSON data.
	JSON OptCreateDocumentResponseDataJSON `json:"json"`
	// Document file name.
	File string `json:"file"`
}

// GetJSON returns the value of JSON.
func (s *CreateDocumentResponseData) GetJSON() OptCreateDocumentResponseDataJSON {
	return s.JSON
}

// GetFile returns the value of File.
func (s *CreateDocumentResponseData) GetFile() string {
	return s.File
}

// SetJSON sets the value of JSON.
func (s *CreateDocumentResponseData) SetJSON(val OptCreateDocumentResponseDataJSON) {
	s.JSON = val
}

// SetFile sets the value of File.
func (s *CreateDocumentResponseData) SetFile(val string) {
	s.File = val
}

// Document JSON data.
type CreateDocumentResponseDataJSON map[string]jx.Raw

func (s *CreateDocumentResponseDataJSON) init() CreateDocumentResponseDataJSON {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/delete_document_response
type DeleteDocumentResponse struct {
	// Success message.
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *DeleteDocumentResponse) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *DeleteDocumentResponse) SetMessage(val string) {
	s.Message = val
}

func (*DeleteDocumentResponse) deleteDocumentByIDRes() {}

// Ref: #/components/schemas/document_dto
type DocumentDto struct {
	// Unique identifier for the document.
	ID uuid.UUID `json:"id"`
	// Document name.
	Name string `json:"name"`
	// Document size in bytes.
	Size int64 `json:"size"`
	// Document MIME type.
	MimeType string `json:"mime_type"`
	// Document checksum (SHA256).
	Checksum string `json:"checksum"`
	// ID of the user who owns the document.
	OwnerID uuid.UUID `json:"owner_id"`
	// Timestamp when document was uploaded.
	CreatedAt time.Time `json:"created_at"`
	// Timestamp when document was last updated.
	UpdatedAt time.Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *DocumentDto) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *DocumentDto) GetName() string {
	return s.Name
}

// GetSize returns the value of Size.
func (s *DocumentDto) GetSize() int64 {
	return s.Size
}

// GetMimeType returns the value of MimeType.
func (s *DocumentDto) GetMimeType() string {
	return s.MimeType
}

// GetChecksum returns the value of Checksum.
func (s *DocumentDto) GetChecksum() string {
	return s.Checksum
}

// GetOwnerID returns the value of OwnerID.
func (s *DocumentDto) GetOwnerID() uuid.UUID {
	return s.OwnerID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *DocumentDto) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *DocumentDto) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *DocumentDto) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DocumentDto) SetName(val string) {
	s.Name = val
}

// SetSize sets the value of Size.
func (s *DocumentDto) SetSize(val int64) {
	s.Size = val
}

// SetMimeType sets the value of MimeType.
func (s *DocumentDto) SetMimeType(val string) {
	s.MimeType = val
}

// SetChecksum sets the value of Checksum.
func (s *DocumentDto) SetChecksum(val string) {
	s.Checksum = val
}

// SetOwnerID sets the value of OwnerID.
func (s *DocumentDto) SetOwnerID(val uuid.UUID) {
	s.OwnerID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *DocumentDto) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *DocumentDto) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

type DownloadDocumentByIDOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s DownloadDocumentByIDOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// DownloadDocumentByIDOKHeaders wraps DownloadDocumentByIDOK with response headers.
type DownloadDocumentByIDOKHeaders struct {
	ContentDisposition OptString
	Response           DownloadDocumentByIDOK
}

// GetContentDisposition returns the value of ContentDisposition.
func (s *DownloadDocumentByIDOKHeaders) GetContentDisposition() OptString {
	return s.ContentDisposition
}

// GetResponse returns the value of Response.
func (s *DownloadDocumentByIDOKHeaders) GetResponse() DownloadDocumentByIDOK {
	return s.Response
}

// SetContentDisposition sets the value of ContentDisposition.
func (s *DownloadDocumentByIDOKHeaders) SetContentDisposition(val OptString) {
	s.ContentDisposition = val
}

// SetResponse sets the value of Response.
func (s *DownloadDocumentByIDOKHeaders) SetResponse(val DownloadDocumentByIDOK) {
	s.Response = val
}

func (*DownloadDocumentByIDOKHeaders) downloadDocumentByIDRes() {}

// Ref: #/components/schemas/forbidden_error
type ForbiddenError struct {
	// Код ошибки.
	Code ForbiddenErrorCode `json:"code"`
	// Сообщение об ошибке.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *ForbiddenError) GetCode() ForbiddenErrorCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ForbiddenError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ForbiddenError) SetCode(val ForbiddenErrorCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ForbiddenError) SetMessage(val string) {
	s.Message = val
}

func (*ForbiddenError) deleteDocumentByIDRes()   {}
func (*ForbiddenError) downloadDocumentByIDRes() {}
func (*ForbiddenError) getDocumentByIDRes()      {}

// Код ошибки.
type ForbiddenErrorCode int

const (
	ForbiddenErrorCode403 ForbiddenErrorCode = 403
)

// AllValues returns all ForbiddenErrorCode values.
func (ForbiddenErrorCode) AllValues() []ForbiddenErrorCode {
	return []ForbiddenErrorCode{
		ForbiddenErrorCode403,
	}
}

// GetDocumentByIDHeadForbidden is response for GetDocumentByIDHead operation.
type GetDocumentByIDHeadForbidden struct{}

func (*GetDocumentByIDHeadForbidden) getDocumentByIDHeadRes() {}

// GetDocumentByIDHeadInternalServerError is response for GetDocumentByIDHead operation.
type GetDocumentByIDHeadInternalServerError struct{}

func (*GetDocumentByIDHeadInternalServerError) getDocumentByIDHeadRes() {}

// GetDocumentByIDHeadNotFound is response for GetDocumentByIDHead operation.
type GetDocumentByIDHeadNotFound struct{}

func (*GetDocumentByIDHeadNotFound) getDocumentByIDHeadRes() {}

// GetDocumentByIDHeadOK is response for GetDocumentByIDHead operation.
type GetDocumentByIDHeadOK struct {
	XDocumentChecksum  OptString
	XDocumentCreatedAt OptDateTime
	XDocumentID        OptUUID
	XDocumentMIMEType  OptString
	XDocumentName      OptString
	XDocumentSize      OptInt
	XDocumentUpdatedAt OptDateTime
}

// GetXDocumentChecksum returns the value of XDocumentChecksum.
func (s *GetDocumentByIDHeadOK) GetXDocumentChecksum() OptString {
	return s.XDocumentChecksum
}

// GetXDocumentCreatedAt returns the value of XDocumentCreatedAt.
func (s *GetDocumentByIDHeadOK) GetXDocumentCreatedAt() OptDateTime {
	return s.XDocumentCreatedAt
}

// GetXDocumentID returns the value of XDocumentID.
func (s *GetDocumentByIDHeadOK) GetXDocumentID() OptUUID {
	return s.XDocumentID
}

// GetXDocumentMIMEType returns the value of XDocumentMIMEType.
func (s *GetDocumentByIDHeadOK) GetXDocumentMIMEType() OptString {
	return s.XDocumentMIMEType
}

// GetXDocumentName returns the value of XDocumentName.
func (s *GetDocumentByIDHeadOK) GetXDocumentName() OptString {
	return s.XDocumentName
}

// GetXDocumentSize returns the value of XDocumentSize.
func (s *GetDocumentByIDHeadOK) GetXDocumentSize() OptInt {
	return s.XDocumentSize
}

// GetXDocumentUpdatedAt returns the value of XDocumentUpdatedAt.
func (s *GetDocumentByIDHeadOK) GetXDocumentUpdatedAt() OptDateTime {
	return s.XDocumentUpdatedAt
}

// SetXDocumentChecksum sets the value of XDocumentChecksum.
func (s *GetDocumentByIDHeadOK) SetXDocumentChecksum(val OptString) {
	s.XDocumentChecksum = val
}

// SetXDocumentCreatedAt sets the value of XDocumentCreatedAt.
func (s *GetDocumentByIDHeadOK) SetXDocumentCreatedAt(val OptDateTime) {
	s.XDocumentCreatedAt = val
}

// SetXDocumentID sets the value of XDocumentID.
func (s *GetDocumentByIDHeadOK) SetXDocumentID(val OptUUID) {
	s.XDocumentID = val
}

// SetXDocumentMIMEType sets the value of XDocumentMIMEType.
func (s *GetDocumentByIDHeadOK) SetXDocumentMIMEType(val OptString) {
	s.XDocumentMIMEType = val
}

// SetXDocumentName sets the value of XDocumentName.
func (s *GetDocumentByIDHeadOK) SetXDocumentName(val OptString) {
	s.XDocumentName = val
}

// SetXDocumentSize sets the value of XDocumentSize.
func (s *GetDocumentByIDHeadOK) SetXDocumentSize(val OptInt) {
	s.XDocumentSize = val
}

// SetXDocumentUpdatedAt sets the value of XDocumentUpdatedAt.
func (s *GetDocumentByIDHeadOK) SetXDocumentUpdatedAt(val OptDateTime) {
	s.XDocumentUpdatedAt = val
}

func (*GetDocumentByIDHeadOK) getDocumentByIDHeadRes() {}

// GetDocumentByIDHeadUnauthorized is response for GetDocumentByIDHead operation.
type GetDocumentByIDHeadUnauthorized struct{}

func (*GetDocumentByIDHeadUnauthorized) getDocumentByIDHeadRes() {}

// Ref: #/components/schemas/get_document_response
type GetDocumentResponse struct {
	Document DocumentDto `json:"document"`
}

// GetDocument returns the value of Document.
func (s *GetDocumentResponse) GetDocument() DocumentDto {
	return s.Document
}

// SetDocument sets the value of Document.
func (s *GetDocumentResponse) SetDocument(val DocumentDto) {
	s.Document = val
}

func (*GetDocumentResponse) getDocumentByIDRes() {}

// Ref: #/components/schemas/internal_server_error
type InternalServerError struct {
	// Код ошибки.
	Code InternalServerErrorCode `json:"code"`
	// Сообщение об ошибке.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *InternalServerError) GetCode() InternalServerErrorCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *InternalServerError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *InternalServerError) SetCode(val InternalServerErrorCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *InternalServerError) SetMessage(val string) {
	s.Message = val
}

func (*InternalServerError) createDocumentRes()       {}
func (*InternalServerError) deleteDocumentByIDRes()   {}
func (*InternalServerError) downloadDocumentByIDRes() {}
func (*InternalServerError) getDocumentByIDRes()      {}
func (*InternalServerError) listDocumentsRes()        {}
func (*InternalServerError) loginUserRes()            {}
func (*InternalServerError) logoutUserRes()           {}
func (*InternalServerError) registerUserRes()         {}

// Код ошибки.
type InternalServerErrorCode int

const (
	InternalServerErrorCode500 InternalServerErrorCode = 500
)

// AllValues returns all InternalServerErrorCode values.
func (InternalServerErrorCode) AllValues() []InternalServerErrorCode {
	return []InternalServerErrorCode{
		InternalServerErrorCode500,
	}
}

// ListDocumentsHeadInternalServerError is response for ListDocumentsHead operation.
type ListDocumentsHeadInternalServerError struct{}

func (*ListDocumentsHeadInternalServerError) listDocumentsHeadRes() {}

// ListDocumentsHeadOK is response for ListDocumentsHead operation.
type ListDocumentsHeadOK struct {
	XPage       OptInt
	XPerPage    OptInt
	XTotalCount OptInt
}

// GetXPage returns the value of XPage.
func (s *ListDocumentsHeadOK) GetXPage() OptInt {
	return s.XPage
}

// GetXPerPage returns the value of XPerPage.
func (s *ListDocumentsHeadOK) GetXPerPage() OptInt {
	return s.XPerPage
}

// GetXTotalCount returns the value of XTotalCount.
func (s *ListDocumentsHeadOK) GetXTotalCount() OptInt {
	return s.XTotalCount
}

// SetXPage sets the value of XPage.
func (s *ListDocumentsHeadOK) SetXPage(val OptInt) {
	s.XPage = val
}

// SetXPerPage sets the value of XPerPage.
func (s *ListDocumentsHeadOK) SetXPerPage(val OptInt) {
	s.XPerPage = val
}

// SetXTotalCount sets the value of XTotalCount.
func (s *ListDocumentsHeadOK) SetXTotalCount(val OptInt) {
	s.XTotalCount = val
}

func (*ListDocumentsHeadOK) listDocumentsHeadRes() {}

// ListDocumentsHeadUnauthorized is response for ListDocumentsHead operation.
type ListDocumentsHeadUnauthorized struct{}

func (*ListDocumentsHeadUnauthorized) listDocumentsHeadRes() {}

// Ref: #/components/schemas/list_documents_response
type ListDocumentsResponse struct {
	// List of documents.
	Documents []DocumentDto `json:"documents"`
	// Total number of documents.
	Total int `json:"total"`
	// Current page number.
	Page int `json:"page"`
	// Number of documents per page.
	PerPage int `json:"per_page"`
}

// GetDocuments returns the value of Documents.
func (s *ListDocumentsResponse) GetDocuments() []DocumentDto {
	return s.Documents
}

// GetTotal returns the value of Total.
func (s *ListDocumentsResponse) GetTotal() int {
	return s.Total
}

// GetPage returns the value of Page.
func (s *ListDocumentsResponse) GetPage() int {
	return s.Page
}

// GetPerPage returns the value of PerPage.
func (s *ListDocumentsResponse) GetPerPage() int {
	return s.PerPage
}

// SetDocuments sets the value of Documents.
func (s *ListDocumentsResponse) SetDocuments(val []DocumentDto) {
	s.Documents = val
}

// SetTotal sets the value of Total.
func (s *ListDocumentsResponse) SetTotal(val int) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *ListDocumentsResponse) SetPage(val int) {
	s.Page = val
}

// SetPerPage sets the value of PerPage.
func (s *ListDocumentsResponse) SetPerPage(val int) {
	s.PerPage = val
}

func (*ListDocumentsResponse) listDocumentsRes() {}

// Ref: #/components/schemas/login_request
type LoginRequest struct {
	// Username or email for authentication.
	Username string `json:"username"`
	// User password.
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s *LoginRequest) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *LoginRequest) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *LoginRequest) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *LoginRequest) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/login_response
type LoginResponse struct {
	User UserDto `json:"user"`
	// JWT access token.
	AccessToken string `json:"access_token"`
	// JWT refresh token.
	RefreshToken string `json:"refresh_token"`
	// Token expiration time in seconds.
	ExpiresIn int `json:"expires_in"`
}

// GetUser returns the value of User.
func (s *LoginResponse) GetUser() UserDto {
	return s.User
}

// GetAccessToken returns the value of AccessToken.
func (s *LoginResponse) GetAccessToken() string {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *LoginResponse) GetRefreshToken() string {
	return s.RefreshToken
}

// GetExpiresIn returns the value of ExpiresIn.
func (s *LoginResponse) GetExpiresIn() int {
	return s.ExpiresIn
}

// SetUser sets the value of User.
func (s *LoginResponse) SetUser(val UserDto) {
	s.User = val
}

// SetAccessToken sets the value of AccessToken.
func (s *LoginResponse) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *LoginResponse) SetRefreshToken(val string) {
	s.RefreshToken = val
}

// SetExpiresIn sets the value of ExpiresIn.
func (s *LoginResponse) SetExpiresIn(val int) {
	s.ExpiresIn = val
}

func (*LoginResponse) loginUserRes() {}

type LogoutUserOK struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *LogoutUserOK) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *LogoutUserOK) SetMessage(val OptString) {
	s.Message = val
}

func (*LogoutUserOK) logoutUserRes() {}

// Ref: #/components/schemas/meta
type Meta struct {
	// Document name.
	Name string `json:"name"`
	// Is this part a file (true for binary upload).
	File bool `json:"file"`
	// Whether document is publicly accessible.
	Public bool `json:"public"`
	// Security token for the upload request.
	Token string `json:"token"`
	// MIME type of the document.
	Mime string `json:"mime"`
	// List of user logins that have access.
	Grant []string `json:"grant"`
}

// GetName returns the value of Name.
func (s *Meta) GetName() string {
	return s.Name
}

// GetFile returns the value of File.
func (s *Meta) GetFile() bool {
	return s.File
}

// GetPublic returns the value of Public.
func (s *Meta) GetPublic() bool {
	return s.Public
}

// GetToken returns the value of Token.
func (s *Meta) GetToken() string {
	return s.Token
}

// GetMime returns the value of Mime.
func (s *Meta) GetMime() string {
	return s.Mime
}

// GetGrant returns the value of Grant.
func (s *Meta) GetGrant() []string {
	return s.Grant
}

// SetName sets the value of Name.
func (s *Meta) SetName(val string) {
	s.Name = val
}

// SetFile sets the value of File.
func (s *Meta) SetFile(val bool) {
	s.File = val
}

// SetPublic sets the value of Public.
func (s *Meta) SetPublic(val bool) {
	s.Public = val
}

// SetToken sets the value of Token.
func (s *Meta) SetToken(val string) {
	s.Token = val
}

// SetMime sets the value of Mime.
func (s *Meta) SetMime(val string) {
	s.Mime = val
}

// SetGrant sets the value of Grant.
func (s *Meta) SetGrant(val []string) {
	s.Grant = val
}

// Ref: #/components/schemas/not_found_error
type NotFoundError struct {
	// Код ошибки.
	Code NotFoundErrorCode `json:"code"`
	// Сообщение об ошибке.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *NotFoundError) GetCode() NotFoundErrorCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *NotFoundError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *NotFoundError) SetCode(val NotFoundErrorCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *NotFoundError) SetMessage(val string) {
	s.Message = val
}

func (*NotFoundError) deleteDocumentByIDRes()   {}
func (*NotFoundError) downloadDocumentByIDRes() {}
func (*NotFoundError) getDocumentByIDRes()      {}

// Код ошибки.
type NotFoundErrorCode int

const (
	NotFoundErrorCode404 NotFoundErrorCode = 404
)

// AllValues returns all NotFoundErrorCode values.
func (NotFoundErrorCode) AllValues() []NotFoundErrorCode {
	return []NotFoundErrorCode{
		NotFoundErrorCode404,
	}
}

// NewOptCreateDocumentRequestMultipartJSON returns new OptCreateDocumentRequestMultipartJSON with value set to v.
func NewOptCreateDocumentRequestMultipartJSON(v CreateDocumentRequestMultipartJSON) OptCreateDocumentRequestMultipartJSON {
	return OptCreateDocumentRequestMultipartJSON{
		Value: v,
		Set:   true,
	}
}

// OptCreateDocumentRequestMultipartJSON is optional CreateDocumentRequestMultipartJSON.
type OptCreateDocumentRequestMultipartJSON struct {
	Value CreateDocumentRequestMultipartJSON
	Set   bool
}

// IsSet returns true if OptCreateDocumentRequestMultipartJSON was set.
func (o OptCreateDocumentRequestMultipartJSON) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateDocumentRequestMultipartJSON) Reset() {
	var v CreateDocumentRequestMultipartJSON
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateDocumentRequestMultipartJSON) SetTo(v CreateDocumentRequestMultipartJSON) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateDocumentRequestMultipartJSON) Get() (v CreateDocumentRequestMultipartJSON, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateDocumentRequestMultipartJSON) Or(d CreateDocumentRequestMultipartJSON) CreateDocumentRequestMultipartJSON {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateDocumentResponseDataJSON returns new OptCreateDocumentResponseDataJSON with value set to v.
func NewOptCreateDocumentResponseDataJSON(v CreateDocumentResponseDataJSON) OptCreateDocumentResponseDataJSON {
	return OptCreateDocumentResponseDataJSON{
		Value: v,
		Set:   true,
	}
}

// OptCreateDocumentResponseDataJSON is optional CreateDocumentResponseDataJSON.
type OptCreateDocumentResponseDataJSON struct {
	Value CreateDocumentResponseDataJSON
	Set   bool
}

// IsSet returns true if OptCreateDocumentResponseDataJSON was set.
func (o OptCreateDocumentResponseDataJSON) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateDocumentResponseDataJSON) Reset() {
	var v CreateDocumentResponseDataJSON
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateDocumentResponseDataJSON) SetTo(v CreateDocumentResponseDataJSON) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateDocumentResponseDataJSON) Get() (v CreateDocumentResponseDataJSON, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateDocumentResponseDataJSON) Or(d CreateDocumentResponseDataJSON) CreateDocumentResponseDataJSON {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/register_request
type RegisterRequest struct {
	// Username for the new user.
	Username string `json:"username"`
	// Email address for the new user.
	Email string `json:"email"`
	// Password for the new user.
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s *RegisterRequest) GetUsername() string {
	return s.Username
}

// GetEmail returns the value of Email.
func (s *RegisterRequest) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *RegisterRequest) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *RegisterRequest) SetUsername(val string) {
	s.Username = val
}

// SetEmail sets the value of Email.
func (s *RegisterRequest) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *RegisterRequest) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/register_response
type RegisterResponse struct {
	User UserDto `json:"user"`
	// JWT access token.
	AccessToken string `json:"access_token"`
	// JWT refresh token.
	RefreshToken string `json:"refresh_token"`
	// Token expiration time in seconds.
	ExpiresIn int `json:"expires_in"`
}

// GetUser returns the value of User.
func (s *RegisterResponse) GetUser() UserDto {
	return s.User
}

// GetAccessToken returns the value of AccessToken.
func (s *RegisterResponse) GetAccessToken() string {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *RegisterResponse) GetRefreshToken() string {
	return s.RefreshToken
}

// GetExpiresIn returns the value of ExpiresIn.
func (s *RegisterResponse) GetExpiresIn() int {
	return s.ExpiresIn
}

// SetUser sets the value of User.
func (s *RegisterResponse) SetUser(val UserDto) {
	s.User = val
}

// SetAccessToken sets the value of AccessToken.
func (s *RegisterResponse) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *RegisterResponse) SetRefreshToken(val string) {
	s.RefreshToken = val
}

// SetExpiresIn sets the value of ExpiresIn.
func (s *RegisterResponse) SetExpiresIn(val int) {
	s.ExpiresIn = val
}

func (*RegisterResponse) registerUserRes() {}

// Ref: #/components/schemas/unauthorized_error
type UnauthorizedError struct {
	// Код ошибки.
	Code UnauthorizedErrorCode `json:"code"`
	// Сообщение об ошибке.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *UnauthorizedError) GetCode() UnauthorizedErrorCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *UnauthorizedError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *UnauthorizedError) SetCode(val UnauthorizedErrorCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *UnauthorizedError) SetMessage(val string) {
	s.Message = val
}

func (*UnauthorizedError) createDocumentRes()       {}
func (*UnauthorizedError) deleteDocumentByIDRes()   {}
func (*UnauthorizedError) downloadDocumentByIDRes() {}
func (*UnauthorizedError) getDocumentByIDRes()      {}
func (*UnauthorizedError) listDocumentsRes()        {}
func (*UnauthorizedError) loginUserRes()            {}
func (*UnauthorizedError) logoutUserRes()           {}

// Код ошибки.
type UnauthorizedErrorCode int

const (
	UnauthorizedErrorCode401 UnauthorizedErrorCode = 401
)

// AllValues returns all UnauthorizedErrorCode values.
func (UnauthorizedErrorCode) AllValues() []UnauthorizedErrorCode {
	return []UnauthorizedErrorCode{
		UnauthorizedErrorCode401,
	}
}

// Ref: #/components/schemas/user_dto
type UserDto struct {
	// Unique identifier for the user.
	ID uuid.UUID `json:"id"`
	// Username for authentication.
	Username string `json:"username"`
	// User's email address.
	Email string `json:"email"`
	// Timestamp when user was created.
	CreatedAt time.Time `json:"created_at"`
	// Timestamp when user was last updated.
	UpdatedAt time.Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *UserDto) GetID() uuid.UUID {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *UserDto) GetUsername() string {
	return s.Username
}

// GetEmail returns the value of Email.
func (s *UserDto) GetEmail() string {
	return s.Email
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserDto) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *UserDto) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *UserDto) SetID(val uuid.UUID) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *UserDto) SetUsername(val string) {
	s.Username = val
}

// SetEmail sets the value of Email.
func (s *UserDto) SetEmail(val string) {
	s.Email = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserDto) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *UserDto) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}
