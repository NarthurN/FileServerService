// Code generated by ogen, DO NOT EDIT.

package fileserver_v1

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateDocument implements createDocument operation.
	//
	// Upload a new document file.
	//
	// POST /api/docs
	CreateDocument(ctx context.Context, req *CreateDocumentRequestMultipart) (CreateDocumentRes, error)
	// DeleteDocumentByID implements deleteDocumentByID operation.
	//
	// Delete document by ID.
	//
	// DELETE /api/docs/{doc_id}
	DeleteDocumentByID(ctx context.Context, params DeleteDocumentByIDParams) (DeleteDocumentByIDRes, error)
	// DownloadDocumentByID implements downloadDocumentByID operation.
	//
	// Download document file by ID.
	//
	// GET /api/docs/{doc_id}/download
	DownloadDocumentByID(ctx context.Context, params DownloadDocumentByIDParams) (DownloadDocumentByIDRes, error)
	// GetDocumentByID implements getDocumentByID operation.
	//
	// Get document metadata by ID.
	//
	// GET /api/docs/{doc_id}
	GetDocumentByID(ctx context.Context, params GetDocumentByIDParams) (GetDocumentByIDRes, error)
	// GetDocumentByIDHead implements getDocumentByIDHead operation.
	//
	// Get document metadata headers by ID (same as GET but without body).
	//
	// HEAD /api/docs/{doc_id}
	GetDocumentByIDHead(ctx context.Context, params GetDocumentByIDHeadParams) (GetDocumentByIDHeadRes, error)
	// ListDocuments implements listDocuments operation.
	//
	// Get paginated list of user documents.
	//
	// GET /api/docs
	ListDocuments(ctx context.Context, params ListDocumentsParams) (ListDocumentsRes, error)
	// ListDocumentsHead implements listDocumentsHead operation.
	//
	// Get headers for paginated list of user documents (same as GET but without body).
	//
	// HEAD /api/docs
	ListDocumentsHead(ctx context.Context, params ListDocumentsHeadParams) (ListDocumentsHeadRes, error)
	// LoginUser implements loginUser operation.
	//
	// Authenticate user and get access token.
	//
	// POST /api/auth/login
	LoginUser(ctx context.Context, req *LoginRequest) (LoginUserRes, error)
	// LogoutUser implements logoutUser operation.
	//
	// Logout user and invalidate token.
	//
	// POST /api/auth/logout
	LogoutUser(ctx context.Context) (LogoutUserRes, error)
	// RegisterUser implements registerUser operation.
	//
	// Create a new user account.
	//
	// POST /api/auth/register
	RegisterUser(ctx context.Context, req *RegisterRequest) (RegisterUserRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
