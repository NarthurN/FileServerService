// Code generated by ogen, DO NOT EDIT.

package fileserver_v1

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateDocument implements createDocument operation.
	//
	// Загрузка нового документа (файл или JSON данные).
	//
	// POST /api/docs
	CreateDocument(ctx context.Context, req *CreateDocumentRequestMultipart) (CreateDocumentRes, error)
	// DeleteDocument implements deleteDocument operation.
	//
	// Удаление документа по его идентификатору.
	//
	// DELETE /api/docs/{id}
	DeleteDocument(ctx context.Context, params DeleteDocumentParams) (DeleteDocumentRes, error)
	// GetDocument implements getDocument operation.
	//
	// Получение конкретного документа по его
	// идентификатору.
	//
	// GET /api/docs/{id}
	GetDocument(ctx context.Context, params GetDocumentParams) (GetDocumentRes, error)
	// GetDocumentHead implements getDocumentHead operation.
	//
	// HEAD запрос для получения заголовков конкретного
	// документа.
	//
	// HEAD /api/docs/{id}
	GetDocumentHead(ctx context.Context, params GetDocumentHeadParams) (GetDocumentHeadRes, error)
	// ListDocuments implements listDocuments operation.
	//
	// Получение списка документов с возможностью
	// фильтрации.
	//
	// GET /api/docs
	ListDocuments(ctx context.Context, params ListDocumentsParams) (ListDocumentsRes, error)
	// ListDocumentsHead implements listDocumentsHead operation.
	//
	// HEAD запрос для получения заголовков списка документов.
	//
	// HEAD /api/docs
	ListDocumentsHead(ctx context.Context, params ListDocumentsHeadParams) (ListDocumentsHeadRes, error)
	// LoginUser implements loginUser operation.
	//
	// Получение токена авторизации по логину и паролю.
	//
	// POST /api/auth
	LoginUser(ctx context.Context, req *LoginRequest) (LoginUserRes, error)
	// LogoutUser implements logoutUser operation.
	//
	// Завершение авторизованной сессии работы.
	//
	// DELETE /api/auth/{token}
	LogoutUser(ctx context.Context, params LogoutUserParams) (LogoutUserRes, error)
	// RegisterUser implements registerUser operation.
	//
	// Создание нового пользователя с логином и паролем.
	//
	// POST /api/register
	RegisterUser(ctx context.Context, req *RegisterRequest) (RegisterUserRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
