openapi: 3.0.3
info:
  title: File Server Service API
  version: 1.0.0
  description: API для сохранения и раздачи электронных документов
servers:
  - url: http://localhost:8080
    description: Development server
paths:
  /api/register:
    post:
      tags:
        - auth
      summary: Регистрация нового пользователя
      description: Создание нового пользователя с логином и паролем
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/register_request'
      responses:
        '200':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/register_response'
        '400':
          description: Некорректные параметры
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad_request_error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_server_error'
  /api/auth:
    post:
      tags:
        - auth
      summary: Аутентификация пользователя
      description: Получение токена авторизации по логину и паролю
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/login_request'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/login_response'
        '400':
          description: Некорректные параметры
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad_request_error'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized_error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_server_error'
  /api/auth/{token}:
    delete:
      tags:
        - auth
      summary: Завершение авторизованной сессии
      description: Завершение авторизованной сессии работы
      operationId: logoutUser
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          description: Токен пользователя для завершения сессии
      responses:
        '200':
          description: Сессия успешно завершена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logout_response'
        '401':
          description: Неверный токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized_error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_server_error'
  /api/docs:
    get:
      tags:
        - docs
      summary: Получение списка документов
      description: Получение списка документов с возможностью фильтрации
      operationId: listDocuments
      parameters:
        - $ref: '#/components/parameters/token'
        - $ref: '#/components/parameters/login'
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Список документов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_documents_response'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized_error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_server_error'
    head:
      tags:
        - docs
      summary: Получение заголовков списка документов
      description: HEAD запрос для получения заголовков списка документов
      operationId: listDocumentsHead
      parameters:
        - $ref: '#/components/parameters/token'
        - $ref: '#/components/parameters/login'
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Заголовки списка документов
        '401':
          description: Не авторизован
        '500':
          description: Внутренняя ошибка сервера
    post:
      tags:
        - docs
      summary: Загрузка нового документа
      description: Загрузка нового документа (файл или JSON данные)
      operationId: createDocument
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/create_document_request'
      responses:
        '200':
          description: Документ успешно загружен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_document_response'
        '400':
          description: Некорректные параметры
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad_request_error'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized_error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_server_error'
  /api/docs/{id}:
    get:
      tags:
        - docs
      summary: Получение документа по ID
      description: Получение конкретного документа по его идентификатору
      operationId: getDocument
      parameters:
        - $ref: '#/components/parameters/doc_id'
        - $ref: '#/components/parameters/token'
      responses:
        '200':
          description: Документ найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_document_response'
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized_error'
        '403':
          description: Нет прав доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden_error'
        '404':
          description: Документ не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not_found_error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_server_error'
    head:
      tags:
        - docs
      summary: Получение заголовков документа по ID
      description: HEAD запрос для получения заголовков конкретного документа
      operationId: getDocumentHead
      parameters:
        - $ref: '#/components/parameters/doc_id'
        - $ref: '#/components/parameters/token'
      responses:
        '200':
          description: Заголовки документа
        '401':
          description: Не авторизован
        '403':
          description: Нет прав доступа
        '404':
          description: Документ не найден
        '500':
          description: Внутренняя ошибка сервера
    delete:
      tags:
        - docs
      summary: Удаление документа
      description: Удаление документа по его идентификатору
      operationId: deleteDocument
      parameters:
        - $ref: '#/components/parameters/doc_id'
        - $ref: '#/components/parameters/token'
      responses:
        '200':
          description: Документ успешно удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_document_response'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized_error'
        '403':
          description: Нет прав доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden_error'
        '404':
          description: Документ не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not_found_error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_server_error'
components:
  schemas:
    RegisterRequest:
      $ref: '#/components/schemas/register_request'
    LoginRequest:
      $ref: '#/components/schemas/login_request'
    CreateDocumentRequest:
      $ref: '#/components/schemas/create_document_request'
    Meta:
      $ref: '#/components/schemas/meta'
    RegisterResponse:
      $ref: '#/components/schemas/register_response'
    LoginResponse:
      $ref: '#/components/schemas/login_response'
    CreateDocumentResponse:
      $ref: '#/components/schemas/create_document_response'
    ListDocumentsResponse:
      $ref: '#/components/schemas/list_documents_response'
    GetDocumentResponse:
      $ref: '#/components/schemas/get_document_response'
    DeleteDocumentResponse:
      $ref: '#/components/schemas/delete_document_response'
    LogoutResponse:
      $ref: '#/components/schemas/logout_response'
    DocumentDTO:
      $ref: '#/components/schemas/document_dto'
    UserDTO:
      $ref: '#/components/schemas/user_dto'
    BadRequestError:
      $ref: '#/components/schemas/bad_request_error'
    UnauthorizedError:
      $ref: '#/components/schemas/unauthorized_error'
    ForbiddenError:
      $ref: '#/components/schemas/forbidden_error'
    NotFoundError:
      $ref: '#/components/schemas/not_found_error'
    MethodNotAllowedError:
      $ref: '#/components/schemas/method_not_allowed_error'
    InternalServerError:
      $ref: '#/components/schemas/internal_server_error'
    NotImplementedError:
      $ref: '#/components/schemas/not_implemented_error'
    register_request:
      type: object
      properties:
        token:
          type: string
          description: Токен администратора (фиксированный, задается в конфиге)
          example: admin-token-123
        login:
          type: string
          description: Логин нового пользователя (минимум 8 символов, латиница и цифры)
          pattern: ^[a-zA-Z0-9]{8,}$
          minLength: 8
          example: testuser123
        pswd:
          type: string
          description: |
            Пароль нового пользователя:
            - минимум 8 символов
            - минимум 2 буквы в разных регистрах
            - минимум 1 цифра
            - минимум 1 символ (не буква и не цифра)
          minLength: 8
          example: TestPass123!
      required:
        - token
        - login
        - pswd
    register_response:
      type: object
      properties:
        response:
          type: object
          properties:
            login:
              type: string
              description: Логин зарегистрированного пользователя
              example: test
          required:
            - login
      required:
        - response
    bad_request_error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              example: 400
            text:
              type: string
              example: Некорректные параметры
          required:
            - code
            - text
      required:
        - error
    internal_server_error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              example: 500
            text:
              type: string
              example: Внутренняя ошибка сервера
          required:
            - code
            - text
      required:
        - error
    login_request:
      type: object
      properties:
        login:
          type: string
          description: Логин пользователя
          example: testuser123
        pswd:
          type: string
          description: Пароль пользователя
          example: TestPass123!
      required:
        - login
        - pswd
    login_response:
      type: object
      properties:
        response:
          type: object
          properties:
            token:
              type: string
              description: Токен авторизации
              example: sfuqwejqjoiu93e29
          required:
            - token
      required:
        - response
    unauthorized_error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              example: 401
            text:
              type: string
              example: Не авторизован
          required:
            - code
            - text
      required:
        - error
    logout_response:
      type: object
      properties:
        response:
          type: object
          description: Результат завершения сессии (токен -> true)
          additionalProperties:
            type: boolean
          example:
            qwdj1q4o34u34ih759ou1: true
      required:
        - response
    document_dto:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор документа
          example: qwdj1q4o34u34ih759ou1
        name:
          type: string
          description: Имя документа
          example: photo.jpg
        mime:
          type: string
          description: MIME тип документа
          example: image/jpg
        file:
          type: boolean
          description: Является ли документ файлом
          example: true
        public:
          type: boolean
          description: Является ли документ публичным
          example: false
        created:
          type: string
          description: Дата и время создания документа
          example: '2018-12-24 10:30:56'
        grant:
          type: array
          items:
            type: string
          description: Список логинов пользователей с доступом
          example:
            - login1
            - login2
      required:
        - id
        - name
        - mime
        - file
        - public
        - created
    list_documents_response:
      type: object
      properties:
        data:
          type: object
          properties:
            docs:
              type: array
              items:
                $ref: '#/components/schemas/document_dto'
              description: Список документов
          required:
            - docs
      required:
        - data
    meta:
      type: object
      properties:
        name:
          type: string
          description: Имя документа
          example: photo.jpg
        file:
          type: boolean
          description: Является ли документ файлом
          example: true
        public:
          type: boolean
          description: Является ли документ публичным
          example: false
        token:
          type: string
          description: Токен авторизации
          example: sfuqwejqjoiu93e29
        mime:
          type: string
          description: MIME тип документа
          example: image/jpg
        grant:
          type: array
          items:
            type: string
          description: Список логинов пользователей, которым предоставлен доступ
          example:
            - login1
            - login2
      required:
        - name
        - file
        - public
        - token
        - mime
    create_document_request:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/meta'
        json:
          type: object
          description: JSON данные документа (опционально)
          additionalProperties: true
          example:
            key1: value1
            key2: 123
            key3:
              nested: data
        file:
          type: string
          format: binary
          description: Файл документа (опционально)
      required:
        - meta
    create_document_response:
      type: object
      properties:
        data:
          type: object
          properties:
            json:
              type: object
              description: JSON данные документа (если были переданы)
              additionalProperties: true
            file:
              type: string
              description: Имя загруженного файла
              example: photo.jpg
          required:
            - file
      required:
        - data
    get_document_response:
      type: object
      properties:
        data:
          type: object
          description: JSON данные документа
          additionalProperties: true
          example:
            key1: value1
            key2: 123
            nested:
              data: example
      required:
        - data
    forbidden_error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              example: 403
            text:
              type: string
              example: Нет прав доступа
          required:
            - code
            - text
      required:
        - error
    not_found_error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              example: 404
            text:
              type: string
              example: Ресурс не найден
          required:
            - code
            - text
      required:
        - error
    delete_document_response:
      type: object
      properties:
        response:
          type: object
          description: Результат удаления документа (ID документа -> true)
          additionalProperties:
            type: boolean
          example:
            qwdj1q4o34u34ih759ou1: true
      required:
        - response
    user_dto:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор пользователя
          example: user-123
        login:
          type: string
          description: Логин пользователя
          example: testuser123
        created:
          type: string
          format: date-time
          description: Дата и время создания пользователя
          example: '2023-12-24T10:30:56Z'
      required:
        - id
        - login
        - created
    method_not_allowed_error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              example: 405
            text:
              type: string
              example: Неверный метод запроса
          required:
            - code
            - text
      required:
        - error
    not_implemented_error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              example: 501
            text:
              type: string
              example: Метод не реализован
          required:
            - code
            - text
      required:
        - error
  parameters:
    DocId:
      $ref: '#/components/parameters/doc_id'
    Token:
      $ref: '#/components/parameters/token'
    Login:
      $ref: '#/components/parameters/login'
    Key:
      $ref: '#/components/parameters/key'
    Value:
      $ref: '#/components/parameters/value'
    Limit:
      $ref: '#/components/parameters/limit'
    token:
      name: token
      in: query
      required: true
      schema:
        type: string
      description: Токен авторизации
      example: sfuqwejqjoiu93e29
    login:
      name: login
      in: query
      required: false
      schema:
        type: string
      description: Логин пользователя для фильтрации (опционально, если не указан - возвращаются собственные документы)
      example: testuser123
    key:
      name: key
      in: query
      required: false
      schema:
        type: string
        enum:
          - name
          - mime
          - public
          - file
          - created
      description: Имя колонки для фильтрации
      example: name
    value:
      name: value
      in: query
      required: false
      schema:
        type: string
      description: Значение фильтра
      example: photo.jpg
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 1000
      description: Количество документов в списке
      example: 10
    doc_id:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Уникальный идентификатор документа
      example: qwdj1q4o34u34ih759ou1
x-ogen:
  target: ./pkg/generated/api/fileserver/v1
  package: fileserver_v1
  clean: true
