package main

import (
	"context"
	"errors"
	"log"
	"net"
	"net/http"
	"os"
	"os/signal"
	"strconv"
	"syscall"
	"time"

	fileserverAPI "github.com/NarthurN/FileServerService/internal/api/docs"
	"github.com/NarthurN/FileServerService/internal/config"
	"github.com/NarthurN/FileServerService/internal/database"
	"github.com/NarthurN/FileServerService/internal/database/migrator"
	fileserverCompositeRepo "github.com/NarthurN/FileServerService/internal/repository"
	fileserverService "github.com/NarthurN/FileServerService/internal/service/docs"
	fileserverV1 "github.com/NarthurN/FileServerService/pkg/generated/api/fileserver/v1"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
)

func main() {
	// –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π
	ctx := context.Background()

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	cfg, err := config.Load()
	if err != nil {
		log.Printf("üö® –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
		return
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ SQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	sqlDB, err := database.NewSQLDB(cfg.Database)
    if err != nil {
        log.Fatal("üö® –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", err)
    }
    defer sqlDB.Close()

	// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
	migrator := migrator.NewMigrator(sqlDB)
    if err := migrator.Up(ctx); err != nil {
        log.Fatal("üö® –æ—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:", err)
    }

	// –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	pool, err := database.NewPool(cfg.Database)
	if err != nil {
		log.Printf("üö® –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %v", err)
		return
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
	repo := fileserverCompositeRepo.NewCompositeRepository(pool)

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
	service := fileserverService.NewService(repo)

	// –°–æ–∑–¥–∞–Ω–∏–µ API
	api := fileserverAPI.NewAPI(service)

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
	fileServer, err := fileserverV1.NewServer(api)
	if err != nil {
		log.Printf("üö® –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		return
	}

	r := chi.NewRouter()

	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(middleware.Timeout(60 * time.Second))

	r.Mount("/api", fileServer)

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    r.Handle("/uploads/*", http.StripPrefix("/uploads", http.FileServer(http.Dir("./bin/storage"))))

    // Swagger UI
	swaggerFS := http.FileServer(http.Dir("./pkg/openapi/bundles"))
    r.Handle("/swagger-ui.html", swaggerFS)
    r.Handle("/docs.openapi.bundle.yaml", swaggerFS)
    r.Handle("/swagger/*", http.StripPrefix("/swagger", swaggerFS))

    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    r.Get("/", func(w http.ResponseWriter, r *http.Request) {
        http.Redirect(w, r, "/swagger-ui.html", http.StatusMovedPermanently)
    })

    server := &http.Server{
        Addr:              net.JoinHostPort(cfg.Server.Host, strconv.Itoa(cfg.Server.Port)),
        Handler:           r, // –ò—Å–ø–æ–ª—å–∑—É–µ–º chi router –Ω–∞–ø—Ä—è–º—É—é
        ReadHeaderTimeout: 10 * time.Second,
        WriteTimeout:      60 * time.Second,  // –î–ª—è —Ñ–∞–π–ª–æ–≤
        IdleTimeout:       120 * time.Second,
        MaxHeaderBytes:    32 << 20, // 32MB –¥–ª—è —Ñ–∞–π–ª–æ–≤
    }

	go func() {
		log.Printf("üöÄ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", strconv.Itoa(cfg.Server.Port))
		err := server.ListenAndServe()
		if err != nil && !errors.Is(err, http.ErrServerClosed) {
			log.Printf("üö® –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()

	// Gracefull shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt, syscall.SIGTERM)
	<-quit

	log.Println("üëã HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	if err := server.Shutdown(ctx); err != nil {
		log.Printf("üö® –æ—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã HTTP —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}

	log.Println("üëã HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")
}
